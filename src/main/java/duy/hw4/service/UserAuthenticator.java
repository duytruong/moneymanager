package duy.hw4.service;

import java.security.GeneralSecurityException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.security.auth.login.LoginException;

import duy.hw4.data.UserRepository;
import duy.hw4.model.User;

@Named
@ApplicationScoped
public class UserAuthenticator {

    // A user storage which stores <username, password>
    private final Map<String, String> users = new HashMap<String, String>();

    // A service key storage which stores <service_key, username>
    private final Map<String, String> serviceKeys = new HashMap<String, String>();

    // An authentication token storage which stores <auth_token, username>.
    private final Map<String, String> authorizationTokens = new HashMap<String, String>();
    
    @Inject
    private UserRepository userRepository;
    
    @PostConstruct
    public void init() {
    	List<User> allUsers = userRepository.findAll();
    	for (User user : allUsers) {
    		users.put(user.getEmail(), user.getPassword());
    		
    		/**
             * Service keys are pre-generated by the system and is given to the
             * authorized client who wants to have access to the REST API. Here,
             * only username1 and username2 is given the REST service access with
             * their respective service keys.
             */
    		serviceKeys.put(user.getServiceKey(), user.getEmail());
        }
    }

    public String login(String serviceKey, String username, String password) throws LoginException {
        if (isServiceKeyValid(serviceKey)) {
            //String usernameMatch = serviceKeys.get(serviceKey);

            if (users.containsKey(username)) {
                String passwordMatch = users.get(username);

                if (passwordMatch.equals(password)) {

                    /**
                     * Once all params are matched, the authToken will be
                     * generated and will be stored in the
                     * authorizationTokensStorage. The authToken will be needed
                     * for every REST API invocation and is only valid within
                     * the login session
                     */
                    String authToken = UUID.randomUUID().toString();
                    authorizationTokens.put(authToken, username);
                    return authToken;
                }
            }
        }
        throw new LoginException("Login failed");
    }

    /**
     * The method that pre-validates if the client which invokes the REST API is
     * from a authorized and authenticated source.
     *
     * @param serviceKey The service key
     * @param authToken The authorization token generated after login
     * @return TRUE for acceptance and FALSE for denied.
     */
    public boolean isAuthTokenValid(String serviceKey, String authToken) {
//        if (isServiceKeyValid(serviceKey)) {
//            String usernameMatch1 = serviceKeys.get(serviceKey);
//
//            if (authorizationTokens.containsKey(authToken)) {
//                String usernameMatch2 = authorizationTokens.get(authToken);
//
//                if (usernameMatch1.equals(usernameMatch2)) {
//                    return true;
//                }
//            }
//        }
//        return false;
    	return authorizationTokens.containsKey(authToken);
    }

    /**
     * This method checks is the service key is valid
     *
     * @param serviceKey
     * @return TRUE if service key matches the pre-generated ones in service key
     * storage. FALSE for otherwise.
     */
    public boolean isServiceKeyValid(String serviceKey) {
        //return serviceKeys.containsKey(serviceKey);
    	return true;
    }

    public void logout(String serviceKey, String authToken) throws GeneralSecurityException {
        if (isServiceKeyValid(serviceKey)) {
            //String usernameMatch1 = serviceKeys.get(serviceKey);

            if (authorizationTokens.containsKey(authToken)) {
                //String usernameMatch2 = authorizationTokens.get(authToken);

                authorizationTokens.remove(authToken);
                return;
            }
        }
        throw new GeneralSecurityException("Invalid service key and authorization token match.");
    }
    
    public User getUser(String authToken) {
    	if (authorizationTokens.containsKey(authToken)) {
	    	String email = authorizationTokens.get(authToken);
	    	User user = userRepository.findByEmail(email);
	    	return user;
    	}
    	return null;
    }
}